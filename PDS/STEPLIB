/* *----------------------------------------------------------------* */
/* *                                                                * */
/* * To install this command, it must be placed into the LINKLIST,  * */
/* * and an "F LLA,REFRESH" operator command must be issued.        * */
/* *                                                                * */
/* * Also, your SYS1.PARMLIB(IKJTSOxx) member must be updated so    * */
/* * that "STEPLIB" is in the AUTHCMD NAMES list.                   * */
/* * After this member has been updated, a "PARMLIB UPDATE(xx)" TSO * */
/* * command must be issued to reflect the parmlib change.          * */
/* *                                                                * */
/* * Note: If a "REAL" STEPLIB DD exists within your LOGON PROC,    * */
/* *       it will NOT be freed, but it will no longer be used.     * */
/* *                                                                * */
/* * *************************************                          * */
/* * *** Special note for BATCH users: ***                          * */
/* * *************************************                          * */
/* *       If you use STEPLIB in a BATCH job, please ensure that    * */
/* *       you issue "STEPLIB REMOVE" prior to terminating the      * */
/* *       step.  Otherwise a small amount of LSQA storage will     * */
/* *       be orphaned under the INIT's TCB.  This could eventually * */
/* *       cause storage fragmentation problems.  A $PI operator    * */
/* *       command will resolve this problem but it would be best   * */
/* *       to prevent it in the first place.                        * */
/* *                                                                * */
/* * If this becomes a MAJOR issue for someone please let me know   * */
/* * and I will write an IEFACTRT exit routine that will recognize  * */
/* * that the STEPLIB command has been used and free the TCB        * */
/* * storage at that time.                                          * */
/* * As STEPLIB was not written with the intent of being used by    * */
/* * batch jobs this was not an issue.  It appears that quite a few * */
/* * sites use the same CLISTs/REXX execs in batch as they do in    * */
/* * TSO.  When TSO terminates the entire address space is cleaned  * */
/* * up so this is not an issue.                                    * */
/* *                                                                * */
/* *----------------------------------------------------------------* */
)F FUNCTION -
     Dynamically manage the STEPLIB.

     Your STEPLIB can be changed at any time, whether you are in ISPF
     or not.  This command handles all situations.

)X SYN
     STEPLIB ADD      DATASETS(DSNAME LIST) FIRST|LAST
     STEPLIB ALLOCATE DATASETS(DSNAME LIST)
     STEPLIB DESTACK  DATASETS(DSNAME LIST)
     STEPLIB FREE
     STEPLIB LIST
     STEPLIB REMOVE   DATASETS(DSNAME LIST)
     STEPLIB SAVE
     STEPLIB STACK    DATASETS(DSNAME LIST)
     STEPLIB VERSION
     STEPLIB ...      APFCHK NOMSGS|MSGS

REQUIRED - <function>
DEFAULTS - ALLOCATE FIRST MSGS
ALIAS    - ALLOCATE / OVERRIDE or REPLACE
         - DESTACK  / UNSTACK
         - FREE     / CLOSE
         - REMOVE   / DELETE
         - DATASETS / DSNAMES
         - FIRST    / BEFORE or FRONT
         - LAST     / AFTER or END
         - MSGS     / LOUD or VERBOSE
         - NOMSGS   / QUIET or TERSE

NOTE: The "SHR" and "REUSE" keywords have been added so that this
      command looks like an ALLOCATE command, although these keywords
      are not used.
      I.E. (STEPLIB DA(MY.LOAD) SHR REUSE)

EXAMPLE:
     STEPLIB DA(MY.LOAD 'XYZ.YOUR.LOAD')

Return Codes:
     If the PARSE process fails this will be the IKJPARS return code.

      4 - Specified Data Set is already in STEPLIB.
      8 - Data Set allocation failed.
     12 - APF Check failed.
     20 - STEPLIB OPEN failed.
     24 - STEPLIB Data Set OPEN failed.

)O OPERANDS -
     ADD      - Add a library(s) to the current STEPLIB concatenation.
                If the library already exists within the STEPLIB, the
                command will terminate with a return code of 4.
     ALLOCATE - Build a new STEPLIB allocation list.
     DESTACK  - Eliminate a single occurance of the library(s) from
                the STEPLIB concatenation.
     FREE     - Remove any existing STEPLIB.
     LIST     - Display the current STEPLIB DDNAME & Dataset names.
     REMOVE   - Eliminate library(s) from the current STEPLIB.
     SAVE     - Create a CLIST variable (&STEPLIB) that contains a
                list of the current STEPLIB data set names.
     STACK    - Add a new instance of the library(s) to the current
                STEPLIB concatenation even if it is already part of the
                current STEPLIB.  This will allow DESTACK to remove a
                single instance without affecting other applications.
     VERSION  - Display the Version and Release of the code as well as
                the assembly date.

     FIRST/LAST - Indicate where the new library(s) are to be added to
                the STEPLIB concatenation.
                The default is to add the new data sets to the beginning
                of the concatenation.

     PAUSE(nnn) - This option is for BATCH processing.  It provides a
                wait time (in seconds) so that the system can perform
                cleanup processing before the step terminates.
                The default is to wait 1 second but this allows the
                user to extend the time if needed.

     APFCHK   - After performing the specified function, all libraries
                in the STEPLIB concatenation are checked to see if they
                are APF authorized.
     NOMSGS   - Do not issue any messages during STEPLIB allocation
                deallocation or APF checking.

